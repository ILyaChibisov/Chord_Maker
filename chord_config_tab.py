from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
                             QComboBox, QLabel, QScrollArea, QGridLayout,
                             QGroupBox, QMessageBox, QSizePolicy)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap, QPainter
import os
import pandas as pd

from chord_config_manager import ChordConfigManager


class ChordConfigTab(QWidget):
    def __init__(self):
        super().__init__()
        self.config_manager = ChordConfigManager()
        self.current_display_type = "fingers"  # fingers –∏–ª–∏ notes
        self.current_group = None
        self.current_chords = []
        self.current_chord = None
        self.original_pixmap = None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        self.initUI()
        self.load_configuration()

    def initUI(self):
        layout = QVBoxLayout(self)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ - –í–°–ï –í –û–î–ù–£ –°–¢–†–û–ö–£
        top_layout = QHBoxLayout()

        # –ö–æ–º–±–æ–±–æ–∫—Å –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.display_type_combo = QComboBox()
        self.display_type_combo.addItems(["–ü–∞–ª—å—Ü—ã", "–ù–æ—Ç—ã"])
        self.display_type_combo.currentTextChanged.connect(self.on_display_type_changed)
        top_layout.addWidget(QLabel("–¢–∏–ø:"))
        top_layout.addWidget(self.display_type_combo)

        # –ö–æ–º–±–æ–±–æ–∫—Å –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∞–∫–∫–æ—Ä–¥–æ–≤
        self.group_combo = QComboBox()
        self.group_combo.currentTextChanged.connect(self.on_group_changed)
        top_layout.addWidget(QLabel("–ì—Ä—É–ø–ø–∞:"))
        top_layout.addWidget(self.group_combo)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–∫–∫–æ—Ä–¥–æ–≤ - –¢–û–ñ–ï –í –≠–¢–£ –ñ–ï –°–¢–†–û–ö–£
        top_layout.addWidget(QLabel("–ê–∫–∫–æ—Ä–¥—ã:"))

        # Scroll area –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–∫–∫–æ—Ä–¥–æ–≤
        self.chords_scroll = QScrollArea()
        self.chords_scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.chords_scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.chords_scroll.setFixedHeight(45)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        self.chords_widget = QWidget()
        self.chords_layout = QHBoxLayout(self.chords_widget)  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout
        self.chords_layout.setContentsMargins(5, 5, 5, 5)
        self.chords_layout.setSpacing(3)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏
        self.chords_scroll.setWidget(self.chords_widget)
        self.chords_scroll.setWidgetResizable(True)

        top_layout.addWidget(self.chords_scroll, 1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ
        top_layout.setSpacing(5)

        layout.addLayout(top_layout)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.image_scroll = QScrollArea()
        self.image_scroll.setWidgetResizable(True)
        self.image_label = QLabel()
        self.image_label.setAlignment(Qt.AlignTop | Qt.AlignLeft)  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Ö–Ω–µ–º—É –ª–µ–≤–æ–º—É —É–≥–ª—É
        self.image_label.setStyleSheet("border: 1px solid gray; background-color: white;")
        self.image_label.setText("–ó–∞–≥—Ä—É–∑–∫–∞...")
        self.image_scroll.setWidget(self.image_label)
        layout.addWidget(self.image_scroll, 1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º

    def load_configuration(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if self.config_manager.load_config_data():
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if os.path.exists(self.config_manager.image_path):
                self.original_pixmap = QPixmap(self.config_manager.image_path)
                if not self.original_pixmap.isNull():
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
                    self.display_original_image()
                else:
                    self.image_label.setText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            else:
                self.image_label.setText(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {self.config_manager.image_path}")

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –≥—Ä—É–ø–ø
            groups = self.config_manager.get_chord_groups()
            self.group_combo.clear()
            self.group_combo.addItems(groups)

            if groups:
                self.current_group = groups[0]
                self.load_chord_buttons()
            else:
                self.image_label.setText("–ì—Ä—É–ø–ø—ã –∞–∫–∫–æ—Ä–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            self.image_label.setText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ templates2")

    def display_original_image(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ë–ï–ó –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.original_pixmap and not self.original_pixmap.isNull():
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ
            self.image_label.setPixmap(self.original_pixmap)
            self.image_label.resize(self.original_pixmap.size())
            print(f"üìè –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {self.original_pixmap.width()}x{self.original_pixmap.height()}")

    def load_chord_buttons(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–∫–∫–æ—Ä–¥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã"""
        # –û—á–∏—â–∞–µ–º layout
        for i in reversed(range(self.chords_layout.count())):
            widget = self.chords_layout.itemAt(i).widget()
            if widget:
                widget.setParent(None)

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–æ—Ä–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
        self.current_chords = self.config_manager.get_chords_by_group(self.current_group)

        if not self.current_chords:
            label = QLabel("–ê–∫–∫–æ—Ä–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            self.chords_layout.addWidget(label)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ - –≤—Å–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        for chord_info in self.current_chords:
            btn = QPushButton(chord_info['name'])
            btn.setFixedSize(50, 30)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä
            btn.setStyleSheet("font-size: 10px;")  # –ú–∞–ª–µ–Ω—å–∫–∏–π —à—Ä–∏—Ñ—Ç
            btn.clicked.connect(lambda checked, c=chord_info: self.on_chord_clicked(c))
            self.chords_layout.addWidget(btn)

    def on_display_type_changed(self, display_type):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.current_display_type = "fingers" if display_type == "–ü–∞–ª—å—Ü—ã" else "notes"
        if self.current_chord:
            self.display_chord(self.current_chord)

    def on_group_changed(self, group):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∞–∫–∫–æ—Ä–¥–æ–≤"""
        self.current_group = group
        self.load_chord_buttons()

        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ó–ê–ì–†–£–ñ–ê–ï–ú –ü–ï–†–í–´–ô –ê–ö–ö–û–†–î –ù–û–í–û–ô –ì–†–£–ü–ü–´
        if self.current_chords:
            self.current_chord = self.current_chords[0]
            self.display_chord(self.current_chord)
        else:
            self.current_chord = None
            if self.original_pixmap:
                self.display_original_image()
            else:
                self.image_label.setText("–ê–∫–∫–æ—Ä–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    def on_chord_clicked(self, chord_info):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∞–∫–∫–æ—Ä–¥–∞"""
        self.current_chord = chord_info
        self.display_chord(chord_info)

    def display_chord(self, chord_info):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–º —Å –æ–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏"""
        try:
            if not self.original_pixmap or self.original_pixmap.isNull():
                self.image_label.setText("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                return

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ –∏–∑ RAM –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞
            ram_key = chord_info['data'].get('RAM')
            crop_rect = self.config_manager.get_ram_crop_area(ram_key)

            # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            elements = self.config_manager.get_chord_elements(
                chord_info['data'],
                self.current_display_type
            )

            print(f"üéØ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞: {chord_info['name']}")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(elements)}")
            print(f"üîß RAM –∫–ª—é—á: {ram_key}")
            print(f"üìê –û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏: {crop_rect}")

            # –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–µ–∑–∫—É –ø–æ RAM, –µ—Å–ª–∏ –æ–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
            if crop_rect:
                crop_x, crop_y, crop_width, crop_height = crop_rect

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                crop_x = max(0, min(crop_x, self.original_pixmap.width() - 1))
                crop_y = max(0, min(crop_y, self.original_pixmap.height() - 1))
                crop_width = max(1, min(crop_width, self.original_pixmap.width() - crop_x))
                crop_height = max(1, min(crop_height, self.original_pixmap.height() - crop_y))

                # –°–û–ó–î–ê–ï–ú –ù–û–í–û–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ê–ó–ú–ï–†–û–ú –° –û–ë–õ–ê–°–¢–¨ –û–ë–†–ï–ó–ö–ò
                result_pixmap = QPixmap(crop_width, crop_height)
                result_pixmap.fill(Qt.white)  # –ó–∞–ø–æ–ª–Ω—è–µ–º –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º

                # –ö–æ–ø–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç—å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                painter = QPainter(result_pixmap)
                source_rect = (crop_x, crop_y, crop_width, crop_height)
                painter.drawPixmap(0, 0, self.original_pixmap,
                                   crop_x, crop_y, crop_width, crop_height)

                # –†–∏—Å—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –ù–û–í–û–ú –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                self.config_manager.draw_elements_on_canvas(
                    painter, elements, (crop_x, crop_y, crop_width, crop_height)
                )
                painter.end()

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ú –†–ê–ó–ú–ï–†–ï –û–ë–õ–ê–°–¢–ò –û–ë–†–ï–ó–ö–ò
                if not result_pixmap.isNull():
                    self.image_label.setPixmap(result_pixmap)
                    self.image_label.resize(result_pixmap.size())
                    print(f"üìè –°–æ–∑–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º: {crop_width}x{crop_height}")
                else:
                    self.image_label.setText("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—Ä–µ–∑–∫–∏, —Ä–∏—Å—É–µ–º –Ω–∞ –ø–æ–ª–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                result_pixmap = self.config_manager.draw_elements_on_image(
                    self.original_pixmap, elements, None
                )
                self.image_label.setPixmap(result_pixmap)
                self.image_label.resize(result_pixmap.size())

        except Exception as e:
            self.image_label.setText(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–∫–∫–æ—Ä–¥–∞: {e}")
            import traceback
            traceback.print_exc()