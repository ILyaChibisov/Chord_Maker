from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
                             QComboBox, QLabel, QScrollArea, QGridLayout,
                             QGroupBox, QMessageBox, QSizePolicy)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap, QPainter
import os
import pandas as pd

from chord_config_manager import ChordConfigManager


class ChordConfigTab(QWidget):
    def __init__(self):
        super().__init__()
        self.config_manager = ChordConfigManager()
        self.current_display_type = "fingers"  # fingers –∏–ª–∏ notes
        self.current_scale_type = "small1"  # small1, small2, medium1, medium2 –∏–ª–∏ original
        self.current_fret_type = "roman"  # roman –∏–ª–∏ numeric
        self.current_group = None
        self.current_chords = []
        self.current_chord = None
        self.original_pixmap = None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        self.initUI()
        self.load_configuration()

    def initUI(self):
        layout = QVBoxLayout(self)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ - –í–°–ï –í –û–î–ù–£ –°–¢–†–û–ö–£
        top_layout = QHBoxLayout()

        # –ö–æ–º–±–æ–±–æ–∫—Å –≤—ã–±–æ—Ä–∞ –º–∞—Å—à—Ç–∞–±–∞ (–ù–û–í–´–ô)
        self.scale_combo = QComboBox()
        self.scale_combo.addItems(["–ú–∞–ª–µ–Ω—å–∫–∏–π 1", "–ú–∞–ª–µ–Ω—å–∫–∏–π 2", "–°—Ä–µ–¥–Ω–∏–π 1", "–°—Ä–µ–¥–Ω–∏–π 2", "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä"])
        self.scale_combo.currentTextChanged.connect(self.on_scale_changed)
        top_layout.addWidget(QLabel("–ú–∞—Å—à—Ç–∞–±:"))
        top_layout.addWidget(self.scale_combo)

        # –ö–æ–º–±–æ–±–æ–∫—Å –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.display_type_combo = QComboBox()
        self.display_type_combo.addItems(["–ü–∞–ª—å—Ü—ã", "–ù–æ—Ç—ã"])
        self.display_type_combo.currentTextChanged.connect(self.on_display_type_changed)
        top_layout.addWidget(QLabel("–¢–∏–ø:"))
        top_layout.addWidget(self.display_type_combo)

        # –ö–æ–º–±–æ–±–æ–∫—Å –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ª–∞–¥–æ–≤ (–ù–û–í–´–ô)
        self.fret_type_combo = QComboBox()
        self.fret_type_combo.addItems(["–†–∏–º—Å–∫–∏–µ", "–û–±—ã—á–Ω—ã–µ"])
        self.fret_type_combo.currentTextChanged.connect(self.on_fret_type_changed)
        top_layout.addWidget(QLabel("–õ–∞–¥:"))
        top_layout.addWidget(self.fret_type_combo)

        # –ö–æ–º–±–æ–±–æ–∫—Å –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –∞–∫–∫–æ—Ä–¥–æ–≤
        self.group_combo = QComboBox()
        self.group_combo.currentTextChanged.connect(self.on_group_changed)
        top_layout.addWidget(QLabel("–ì—Ä—É–ø–ø–∞:"))
        top_layout.addWidget(self.group_combo)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–∫–∫–æ—Ä–¥–æ–≤ - –¢–û–ñ–ï –í –≠–¢–£ –ñ–ï –°–¢–†–û–ö–£
        top_layout.addWidget(QLabel("–ê–∫–∫–æ—Ä–¥—ã:"))

        # Scroll area –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–∫–∫–æ—Ä–¥–æ–≤
        self.chords_scroll = QScrollArea()
        self.chords_scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.chords_scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.chords_scroll.setFixedHeight(45)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        self.chords_widget = QWidget()
        self.chords_layout = QHBoxLayout(self.chords_widget)  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout
        self.chords_layout.setContentsMargins(5, 5, 5, 5)
        self.chords_layout.setSpacing(3)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏
        self.chords_scroll.setWidget(self.chords_widget)
        self.chords_scroll.setWidgetResizable(True)

        top_layout.addWidget(self.chords_scroll, 1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ù–û–í–ê–Ø)
        self.refresh_button = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        self.refresh_button.setFixedSize(150, 30)
        self.refresh_button.clicked.connect(self.refresh_configuration)
        top_layout.addWidget(self.refresh_button)

        top_layout.setSpacing(5)

        layout.addLayout(top_layout)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.image_scroll = QScrollArea()
        self.image_scroll.setWidgetResizable(True)
        self.image_label = QLabel()
        self.image_label.setAlignment(Qt.AlignCenter)
        self.image_label.setStyleSheet("border: 1px solid gray; background-color: white;")
        self.image_label.setText("–ó–∞–≥—Ä—É–∑–∫–∞...")
        self.image_label.setMinimumSize(400, 300)  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        self.image_scroll.setWidget(self.image_label)
        layout.addWidget(self.image_scroll, 1)  # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º

    def load_configuration(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if self.config_manager.load_config_data():
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if os.path.exists(self.config_manager.image_path):
                self.original_pixmap = QPixmap(self.config_manager.image_path)
                if not self.original_pixmap.isNull():
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
                    self.display_original_image()
                else:
                    self.image_label.setText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            else:
                self.image_label.setText(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {self.config_manager.image_path}")

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –≥—Ä—É–ø–ø
            groups = self.config_manager.get_chord_groups()
            self.group_combo.clear()
            self.group_combo.addItems(groups)

            if groups:
                self.current_group = groups[0]
                self.load_chord_buttons()
            else:
                self.image_label.setText("–ì—Ä—É–ø–ø—ã –∞–∫–∫–æ—Ä–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            self.image_label.setText("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ templates2")

    def refresh_configuration(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_group = self.current_group
            current_chord = self.current_chord

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if self.config_manager.load_config_data():
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if os.path.exists(self.config_manager.image_path):
                    self.original_pixmap = QPixmap(self.config_manager.image_path)

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –≥—Ä—É–ø–ø
                groups = self.config_manager.get_chord_groups()
                self.group_combo.clear()
                self.group_combo.addItems(groups)

                if groups:
                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    if current_group in groups:
                        self.current_group = current_group
                        self.group_combo.setCurrentText(current_group)
                    else:
                        self.current_group = groups[0]
                        self.group_combo.setCurrentText(groups[0])

                    self.load_chord_buttons()

                    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–∫–∫–æ—Ä–¥
                    if current_chord:
                        chord_names = [chord['name'] for chord in self.current_chords]
                        if current_chord['name'] in chord_names:
                            # –ù–∞—Ö–æ–¥–∏–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω—É–∂–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞
                            index = chord_names.index(current_chord['name'])
                            self.current_chord = self.current_chords[index]
                            self.display_chord(self.current_chord)
                        else:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–∫–∫–æ—Ä–¥ –≥—Ä—É–ø–ø—ã
                            self.current_chord = self.current_chords[0]
                            self.display_chord(self.current_chord)
                    else:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–∫–∫–æ—Ä–¥ –≥—Ä—É–ø–ø—ã
                        self.current_chord = self.current_chords[0]
                        self.display_chord(self.current_chord)
                else:
                    self.image_label.setText("–ì—Ä—É–ø–ø—ã –∞–∫–∫–æ—Ä–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞!")
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ Excel —Ñ–∞–π–ª–∞")
                print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}"
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", error_msg)
            print(f"‚ùå {error_msg}")
            import traceback
            traceback.print_exc()

    def display_original_image(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if self.original_pixmap and not self.original_pixmap.isNull():
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
            scaled_pixmap = self.original_pixmap.scaled(
                self.image_label.width(),
                self.image_label.height(),
                Qt.KeepAspectRatio,
                Qt.SmoothTransformation
            )
            self.image_label.setPixmap(scaled_pixmap)
            print(
                f"üìè –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {self.original_pixmap.width()}x{self.original_pixmap.height()} -> {scaled_pixmap.width()}x{scaled_pixmap.height()}")

    def load_chord_buttons(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–∫–∫–æ—Ä–¥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã"""
        # –û—á–∏—â–∞–µ–º layout
        for i in reversed(range(self.chords_layout.count())):
            widget = self.chords_layout.itemAt(i).widget()
            if widget:
                widget.setParent(None)

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–æ—Ä–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
        self.current_chords = self.config_manager.get_chords_by_group(self.current_group)

        if not self.current_chords:
            label = QLabel("–ê–∫–∫–æ—Ä–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            self.chords_layout.addWidget(label)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ - –≤—Å–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        for chord_info in self.current_chords:
            btn = QPushButton(chord_info['name'])
            btn.setFixedSize(50, 30)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä
            btn.setStyleSheet("font-size: 10px;")  # –ú–∞–ª–µ–Ω—å–∫–∏–π —à—Ä–∏—Ñ—Ç
            btn.clicked.connect(lambda checked, c=chord_info: self.on_chord_clicked(c))
            self.chords_layout.addWidget(btn)

        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ó–ê–ì–†–£–ñ–ê–ï–ú –ü–ï–†–í–´–ô –ê–ö–ö–û–†–î –ì–†–£–ü–ü–´
        if self.current_chords:
            self.current_chord = self.current_chords[0]
            self.display_chord(self.current_chord)

    def on_scale_changed(self, scale_type):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞"""
        if scale_type == "–ú–∞–ª–µ–Ω—å–∫–∏–π 1":
            self.current_scale_type = "small1"
        elif scale_type == "–ú–∞–ª–µ–Ω—å–∫–∏–π 2":
            self.current_scale_type = "small2"
        elif scale_type == "–°—Ä–µ–¥–Ω–∏–π 1":
            self.current_scale_type = "medium1"
        elif scale_type == "–°—Ä–µ–¥–Ω–∏–π 2":
            self.current_scale_type = "medium2"
        else:
            self.current_scale_type = "original"

        if self.current_chord:
            self.display_chord(self.current_chord)
        elif self.original_pixmap:
            self.display_original_image()

    def on_display_type_changed(self, display_type):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        self.current_display_type = "fingers" if display_type == "–ü–∞–ª—å—Ü—ã" else "notes"
        if self.current_chord:
            self.display_chord(self.current_chord)

    def on_fret_type_changed(self, fret_type):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∞–¥–æ–≤"""
        self.current_fret_type = "roman" if fret_type == "–†–∏–º—Å–∫–∏–µ" else "numeric"
        if self.current_chord:
            self.display_chord(self.current_chord)

    def on_group_changed(self, group):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –∞–∫–∫–æ—Ä–¥–æ–≤"""
        self.current_group = group
        self.load_chord_buttons()

        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ó–ê–ì–†–£–ñ–ê–ï–ú –ü–ï–†–í–´–ô –ê–ö–ö–û–†–î –ù–û–í–û–ô –ì–†–£–ü–ü–´
        if self.current_chords:
            self.current_chord = self.current_chords[0]
            self.display_chord(self.current_chord)
        else:
            self.current_chord = None
            if self.original_pixmap:
                self.display_original_image()
            else:
                self.image_label.setText("–ê–∫–∫–æ—Ä–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    def on_chord_clicked(self, chord_info):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∞–∫–∫–æ—Ä–¥–∞"""
        self.current_chord = chord_info
        self.display_chord(chord_info)

    def display_chord(self, chord_info):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–∞—Å—à—Ç–∞–±–æ–º"""
        try:
            if not self.original_pixmap or self.original_pixmap.isNull():
                self.image_label.setText("–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                return

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ –∏–∑ RAM –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–æ—Ä–¥–∞
            ram_key = chord_info['data'].get('RAM')
            crop_rect = self.config_manager.get_ram_crop_area(ram_key)

            print(f"üéØ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {self.original_pixmap.width()}x{self.original_pixmap.height()}")
            print(f"üéØ –û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è RAM '{ram_key}': {crop_rect}")

            # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            elements = self.config_manager.get_chord_elements(
                chord_info['data'],
                self.current_display_type
            )

            print(f"üéØ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞: {chord_info['name']}")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(elements)}")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã –ª–∞–¥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            if self.current_fret_type == "numeric":
                elements = self.convert_frets_to_numeric(elements)

            # –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–µ–∑–∫—É –ø–æ RAM, –µ—Å–ª–∏ –æ–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
            if crop_rect:
                crop_x, crop_y, crop_width, crop_height = crop_rect

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                crop_x = max(0, min(crop_x, self.original_pixmap.width() - 1))
                crop_y = max(0, min(crop_y, self.original_pixmap.height() - 1))
                crop_width = max(1, min(crop_width, self.original_pixmap.width() - crop_x))
                crop_height = max(1, min(crop_height, self.original_pixmap.height() - crop_y))

                print(f"üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏: ({crop_x}, {crop_y}, {crop_width}, {crop_height})")

                # –°–û–ó–î–ê–ï–ú –ù–û–í–û–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï –†–ê–ó–ú–ï–†–û–ú –° –û–ë–õ–ê–°–¢–¨ –û–ë–†–ï–ó–ö–ò
                result_pixmap = QPixmap(crop_width, crop_height)
                result_pixmap.fill(Qt.white)  # –ë–µ–ª—ã–π —Ñ–æ–Ω

                # –°–æ–∑–¥–∞–µ–º painter –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                painter = QPainter(result_pixmap)

                # –ö–æ–ø–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç—å –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                painter.drawPixmap(0, 0, self.original_pixmap,
                                   crop_x, crop_y, crop_width, crop_height)

                # –†–∏—Å—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –ù–û–í–û–ú –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                self.config_manager.draw_elements_on_canvas(
                    painter, elements, (crop_x, crop_y, crop_width, crop_height)
                )
                painter.end()

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–±
                if self.current_scale_type == "small1":
                    # –ú–ê–õ–ï–ù–¨–ö–ò–ô 1 - –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ (–∞–≤—Ç–æ –º–∞—Å—à—Ç–∞–±)
                    display_width = min(400, crop_width)
                    scale_factor = display_width / crop_width
                    display_height = int(crop_height * scale_factor)

                    scaled_pixmap = result_pixmap.scaled(
                        display_width,
                        display_height,
                        Qt.KeepAspectRatio,
                        Qt.SmoothTransformation
                    )
                    self.image_label.setPixmap(scaled_pixmap)
                    print(f"üìè –ú–∞–ª–µ–Ω—å–∫–∏–π 1: {crop_width}x{crop_height} -> {display_width}x{display_height}")

                elif self.current_scale_type == "small2":
                    # –ú–ê–õ–ï–ù–¨–ö–ò–ô 2 - 30% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
                    display_width = int(crop_width * 0.3)
                    display_height = int(crop_height * 0.3)

                    scaled_pixmap = result_pixmap.scaled(
                        display_width,
                        display_height,
                        Qt.KeepAspectRatio,
                        Qt.SmoothTransformation
                    )
                    self.image_label.setPixmap(scaled_pixmap)
                    print(f"üìè –ú–∞–ª–µ–Ω—å–∫–∏–π 2 (30%): {crop_width}x{crop_height} -> {display_width}x{display_height}")

                elif self.current_scale_type == "medium1":
                    # –°–†–ï–î–ù–ò–ô 1 - 50% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
                    display_width = int(crop_width * 0.5)
                    display_height = int(crop_height * 0.5)

                    scaled_pixmap = result_pixmap.scaled(
                        display_width,
                        display_height,
                        Qt.KeepAspectRatio,
                        Qt.SmoothTransformation
                    )
                    self.image_label.setPixmap(scaled_pixmap)
                    print(f"üìè –°—Ä–µ–¥–Ω–∏–π 1 (50%): {crop_width}x{crop_height} -> {display_width}x{display_height}")

                elif self.current_scale_type == "medium2":
                    # –°–†–ï–î–ù–ò–ô 2 - 70% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
                    display_width = int(crop_width * 0.7)
                    display_height = int(crop_height * 0.7)

                    scaled_pixmap = result_pixmap.scaled(
                        display_width,
                        display_height,
                        Qt.KeepAspectRatio,
                        Qt.SmoothTransformation
                    )
                    self.image_label.setPixmap(scaled_pixmap)
                    print(f"üìè –°—Ä–µ–¥–Ω–∏–π 2 (70%): {crop_width}x{crop_height} -> {display_width}x{display_height}")

                else:
                    # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –†–ê–ó–ú–ï–†
                    self.image_label.setPixmap(result_pixmap)
                    print(f"üìè –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {crop_width}x{crop_height}")

            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—Ä–µ–∑–∫–∏, —Ä–∏—Å—É–µ–º –Ω–∞ –ø–æ–ª–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                result_pixmap = self.config_manager.draw_elements_on_image(
                    self.original_pixmap, elements, None
                )

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–±
                if self.current_scale_type == "small1":
                    # –ú–ê–õ–ï–ù–¨–ö–ò–ô 1
                    scaled_pixmap = result_pixmap.scaled(
                        self.image_label.width(),
                        self.image_label.height(),
                        Qt.KeepAspectRatio,
                        Qt.SmoothTransformation
                    )
                    self.image_label.setPixmap(scaled_pixmap)
                    print(f"üìè –ú–∞–ª–µ–Ω—å–∫–∏–π 1 –ø–æ–ª–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                elif self.current_scale_type == "small2":
                    # –ú–ê–õ–ï–ù–¨–ö–ò–ô 2 - 30% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
                    display_width = int(result_pixmap.width() * 0.3)
                    display_height = int(result_pixmap.height() * 0.3)

                    scaled_pixmap = result_pixmap.scaled(
                        display_width,
                        display_height,
                        Qt.KeepAspectRatio,
                        Qt.SmoothTransformation
                    )
                    self.image_label.setPixmap(scaled_pixmap)
                    print(f"üìè –ú–∞–ª–µ–Ω—å–∫–∏–π 2 (30%) –ø–æ–ª–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                elif self.current_scale_type == "medium1":
                    # –°–†–ï–î–ù–ò–ô 1 - 50% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
                    display_width = int(result_pixmap.width() * 0.5)
                    display_height = int(result_pixmap.height() * 0.5)

                    scaled_pixmap = result_pixmap.scaled(
                        display_width,
                        display_height,
                        Qt.KeepAspectRatio,
                        Qt.SmoothTransformation
                    )
                    self.image_label.setPixmap(scaled_pixmap)
                    print(f"üìè –°—Ä–µ–¥–Ω–∏–π 1 (50%) –ø–æ–ª–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                elif self.current_scale_type == "medium2":
                    # –°–†–ï–î–ù–ò–ô 2 - 70% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
                    display_width = int(result_pixmap.width() * 0.7)
                    display_height = int(result_pixmap.height() * 0.7)

                    scaled_pixmap = result_pixmap.scaled(
                        display_width,
                        display_height,
                        Qt.KeepAspectRatio,
                        Qt.SmoothTransformation
                    )
                    self.image_label.setPixmap(scaled_pixmap)
                    print(f"üìè –°—Ä–µ–¥–Ω–∏–π 2 (70%) –ø–æ–ª–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

                else:
                    # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –†–ê–ó–ú–ï–†
                    self.image_label.setPixmap(result_pixmap)
                    print(f"üìè –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        except Exception as e:
            self.image_label.setText(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–∫–∫–æ—Ä–¥–∞: {e}")
            import traceback
            traceback.print_exc()

    def convert_frets_to_numeric(self, elements):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–∏–º—Å–∫–∏—Ö —Ü–∏—Ñ—Ä –ª–∞–¥–æ–≤ –≤ –æ–±—ã—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã"""
        roman_to_numeric = {
            'I': '1', 'II': '2', 'III': '3', 'IV': '4', 'V': '5',
            'VI': '6', 'VII': '7', 'VIII': '8', 'IX': '9', 'X': '10',
            'XI': '11', 'XII': '12', 'XIII': '13', 'XIV': '14', 'XV': '15',
            'XVI': '16'
        }

        converted_elements = []
        for element in elements:
            if element['type'] == 'fret':
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞
                converted_element = element.copy()
                fret_data = converted_element['data'].copy()

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª –ª–∞–¥–∞
                original_symbol = fret_data.get('symbol', 'I')
                if original_symbol in roman_to_numeric:
                    fret_data['symbol'] = roman_to_numeric[original_symbol]
                    print(f"üéØ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –ª–∞–¥: {original_symbol} -> {fret_data['symbol']}")

                converted_element['data'] = fret_data
                converted_elements.append(converted_element)
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                converted_elements.append(element)

        return converted_elements