import pandas as pd
import os
import json
from PyQt5.QtGui import QPixmap, QPainter
from PyQt5.QtCore import Qt


class ChordConfigManager:
    def __init__(self):
        self.excel_path = os.path.join("templates2", "chord_config.xlsx")
        self.template_path = os.path.join("templates2", "template.json")
        self.image_path = os.path.join("templates2", "img.png")
        self.chord_data = {}
        self.ram_data = {}
        self.templates = {}

    def load_config_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –∏ JSON"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª
            if os.path.exists(self.excel_path):
                # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏
                df_chords = pd.read_excel(self.excel_path, sheet_name='CHORDS')
                print("=" * 80)
                print("–ö–û–õ–û–ù–ö–ò –í EXCEL CHORDS:", df_chords.columns.tolist())

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
                self.chord_data = df_chords.to_dict('records')
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.chord_data)} –∞–∫–∫–æ—Ä–¥–æ–≤")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ RAM
                df_ram = pd.read_excel(self.excel_path, sheet_name='RAM')
                print("–ö–û–õ–û–ù–ö–ò –í EXCEL RAM:", df_ram.columns.tolist())

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º RAM –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                self.ram_data = df_ram.to_dict('records')
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.ram_data)} RAM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")

                # –í—ã–≤–æ–¥–∏–º –≤—Å–µ RAM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                print("üìã –í—Å–µ RAM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
                for ram_item in self.ram_data:
                    print(f"   RAM: {ram_item.get('RAM')} -> LAD: {ram_item.get('LAD')}")

            else:
                print(f"Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.excel_path}")
                return False

            # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —à–∞–±–ª–æ–Ω—ã
            if os.path.exists(self.template_path):
                with open(self.template_path, 'r', encoding='utf-8') as f:
                    self.templates = json.load(f)
                print("JSON —à–∞–±–ª–æ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –≤ JSON: {list(self.templates.keys())}")
                print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ frets –≤ JSON: {list(self.templates.get('frets', {}).keys())}")
            else:
                print(f"JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.template_path}")
                return False

            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return False

    def get_chord_groups(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∞–∫–∫–æ—Ä–¥–æ–≤"""
        groups = set()
        for chord in self.chord_data:
            chord_name = chord.get('CHORD')
            if chord_name:
                chord_name = str(chord_name)
                base_chord = ''.join([c for c in chord_name if c.isalpha()])
                if base_chord:
                    groups.add(base_chord)
        return sorted(list(groups))

    def get_chords_by_group(self, group):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–æ–≤ –ø–æ –≥—Ä—É–ø–ø–µ"""
        chords = []
        for chord in self.chord_data:
            chord_name = chord.get('CHORD')
            variant = chord.get('VARIANT')

            if chord_name and variant is not None:
                chord_name = str(chord_name)
                base_chord = ''.join([c for c in chord_name if c.isalpha()])
                if base_chord == group:
                    chords.append({
                        'name': f"{chord_name}{variant}",
                        'chord': chord_name,
                        'variant': variant,
                        'data': chord
                    })
        return sorted(chords, key=lambda x: x['name'])

    def get_ram_crop_area(self, ram_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–µ–∑–∫–∏ –∏–∑ RAM –≤ JSON"""
        if not ram_name or self._is_empty_value(ram_name):
            print(f"RAM '{ram_name}' –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        ram_name = str(ram_name).strip()
        print(f"üîç –ü–æ–∏—Å–∫ –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è RAM: '{ram_name}'")

        # –ò—â–µ–º RAM –≤ —Ä–∞–∑–¥–µ–ª–µ crop_rects
        if 'crop_rects' in self.templates and ram_name in self.templates['crop_rects']:
            crop_data = self.templates['crop_rects'][ram_name]
            area = (
                crop_data.get('x', 0),
                crop_data.get('y', 0),
                crop_data.get('width', 100),
                crop_data.get('height', 100)
            )
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ '{ram_name}': {area}")
            return area

        print(f"‚ùå –û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è '{ram_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ JSON")
        return None

    def get_ram_lad_value(self, ram_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è LAD –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ RAM –∏–∑ —Ç–∞–±–ª–∏—Ü—ã RAM"""
        if not ram_name or self._is_empty_value(ram_name):
            return None

        ram_name = str(ram_name).strip()
        print(f"üîç –ü–æ–∏—Å–∫ LAD –¥–ª—è RAM: '{ram_name}'")

        # –ò—â–µ–º RAM –≤ —Ç–∞–±–ª–∏—Ü–µ RAM
        for ram_item in self.ram_data:
            item_ram = ram_item.get('RAM')
            if item_ram and str(item_ram).strip() == ram_name:
                lad_value = ram_item.get('LAD')
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω LAD –¥–ª—è RAM '{ram_name}': '{lad_value}'")
                return lad_value

        print(f"‚ùå RAM '{ram_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ RAM")
        return None

    def get_ram_elements(self, ram_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ RAM –ø–æ –∏–º–µ–Ω–∏"""
        elements = []
        if not ram_name or self._is_empty_value(ram_name):
            return elements

        ram_name = str(ram_name).strip()

        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã RAM –≤ frets
        if ram_name in self.templates.get('frets', {}):
            elements.append({
                'type': 'fret',
                'data': self.templates['frets'][ram_name]
            })

        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ (RAM1, RAM2 –∏ —Ç.–¥.)
        for i in range(1, 5):
            element_key = f"{ram_name}{i}"
            if element_key in self.templates.get('frets', {}):
                elements.append({
                    'type': 'fret',
                    'data': self.templates['frets'][element_key]
                })

        return elements

    def get_ram_elements_from_lad(self, lad_value):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ RAM –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è LAD"""
        elements = []

        if not lad_value or self._is_empty_value(lad_value):
            return elements

        lad_value = str(lad_value).strip()
        print(f"üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è LAD: '{lad_value}'")

        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∑–∞–ø—è—Ç–æ–π
        lad_keys = [key.strip() for key in lad_value.split(',')]

        for lad_key in lad_keys:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ JSON (–¥–æ–±–∞–≤–ª—è–µ–º LAD)
            json_key = f"{lad_key}LAD"
            if json_key in self.templates.get('frets', {}):
                elements.append({
                    'type': 'fret',
                    'data': self.templates['frets'][json_key]
                })
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –ª–∞–¥–∞: {json_key}")
            else:
                print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –ª–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON: {json_key}")

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ LAD")
        return elements

    def _is_empty_value(self, value):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        if value is None:
            return True
        if isinstance(value, float) and pd.isna(value):
            return True
        if isinstance(value, str) and value.strip() == '':
            return True
        return False

    def get_elements_from_column(self, column_value, element_type):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ Excel"""
        elements = []

        if self._is_empty_value(column_value):
            return elements

        element_str = str(column_value)
        element_list = element_str.split(',')

        for element_key in element_list:
            element_key = element_key.strip()

            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ templates
            if element_key in self.templates.get(element_type, {}):
                elements.append({
                    'type': element_type[:-1] if element_type.endswith('s') else element_type,
                    'data': self.templates[element_type][element_key]
                })

        return elements

    def get_chord_elements(self, chord_config, display_type):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–∫–∫–æ—Ä–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        elements = []

        print(f"üéµ –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞:")
        print(f"   RAM: {chord_config.get('RAM')}")
        print(f"   FN: {chord_config.get('FN')}")
        print(f"   FO: {chord_config.get('FO')}")
        print(f"   F2: {chord_config.get('F2')}")

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ LAD –∏–∑ —Ç–∞–±–ª–∏—Ü—ã RAM –Ω–∞ –æ—Å–Ω–æ–≤–µ RAM –∞–∫–∫–æ—Ä–¥–∞
        ram_key = chord_config.get('RAM')
        lad_value = None
        if ram_key:
            lad_value = self.get_ram_lad_value(ram_key)
            print(f"   LAD (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã RAM): {lad_value}")

        # –î–æ–±–∞–≤–ª—è–µ–º RAM —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ RAM (–¥–ª—è –æ–±—Ä–µ–∑–∫–∏)
        if ram_key:
            ram_elements = self.get_ram_elements(ram_key)
            elements.extend(ram_elements)
            print(f"üîß –î–æ–±–∞–≤–ª–µ–Ω–æ {len(ram_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ RAM")

        # –î–æ–±–∞–≤–ª—è–µ–º LAD —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã RAM
        if lad_value:
            lad_elements = self.get_ram_elements_from_lad(lad_value)
            elements.extend(lad_elements)
            print(f"üéØ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(lad_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ LAD")

        if display_type == "notes":
            # –î–ª—è –Ω–æ—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º FN
            fn_elements = self.get_elements_from_column(chord_config.get('FN'), 'notes')
            elements.extend(fn_elements)
            print(f"üéµ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(fn_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–æ—Ç")

        else:  # fingers
            # –î–ª—è –ø–∞–ª—å—Ü–µ–≤: –∏—Å–ø–æ–ª—å–∑—É–µ–º FO –∏ F2
            fo_elements = self.get_elements_from_column(chord_config.get('FO'), 'notes')
            f2_elements = self.get_elements_from_column(chord_config.get('F2'), 'notes')

            elements.extend(fo_elements)
            elements.extend(f2_elements)
            print(f"üëÜ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(fo_elements) + len(f2_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∞–ª—å—Ü–µ–≤")

        print(f"üìä –ò–¢–û–ì–û —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏: {len(elements)}")

        # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        for i, element in enumerate(elements):
            print(f"   –≠–ª–µ–º–µ–Ω—Ç {i + 1}: {element['type']} - {element['data'].get('symbol', '?')}")

        return elements

    def draw_elements_on_image(self, pixmap, elements, crop_rect=None):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞"""
        if pixmap.isNull():
            return pixmap

        result_pixmap = QPixmap(pixmap)
        painter = QPainter(result_pixmap)

        try:
            for element in elements:
                if element['type'] == 'fret':
                    self.draw_fret(painter, element['data'], crop_rect)
                elif element['type'] == 'note':
                    self.draw_note(painter, element['data'], crop_rect)

        finally:
            painter.end()

        return result_pixmap

    def draw_fret(self, painter, fret_data, crop_rect=None):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∞–¥–∞ —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞"""
        try:
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ –º–∞—Å—à—Ç–∞–±—É –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            adapted_data = self._adapt_coordinates(fret_data, crop_rect)
            print(
                f"üé® –†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∞–¥–∞: {adapted_data.get('symbol', '?')} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ({adapted_data.get('x', 0)}, {adapted_data.get('y', 0)})")

            from drawing_elements import DrawingElements
            DrawingElements.draw_fret(painter, adapted_data)
        except ImportError:
            adapted_data = self._adapt_coordinates(fret_data, crop_rect)
            x = adapted_data.get('x', 0)
            y = adapted_data.get('y', 0)
            size = adapted_data.get('size', 20)
            symbol = adapted_data.get('symbol', 'I')

            print(f"üé® –†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∞–¥–∞ (fallback): {symbol} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ({x}, {y}) —Ä–∞–∑–º–µ—Ä {size}")

            painter.setPen(Qt.black)
            font = painter.font()
            font.setPointSize(size)
            painter.setFont(font)
            painter.drawText(x, y, symbol)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ª–∞–¥–∞: {e}")

    def draw_note(self, painter, note_data, crop_rect=None):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–æ—Ç—ã —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞"""
        try:
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ –º–∞—Å—à—Ç–∞–±—É –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            adapted_data = self._adapt_coordinates(note_data, crop_rect)
            from drawing_elements import DrawingElements
            DrawingElements.draw_note(painter, adapted_data)
        except ImportError:
            adapted_data = self._adapt_coordinates(note_data, crop_rect)
            x = adapted_data.get('x', 0)
            y = adapted_data.get('y', 0)
            radius = adapted_data.get('radius', 15)
            symbol = adapted_data.get('symbol', '1') or adapted_data.get('finger', '1')

            painter.setPen(Qt.black)
            painter.setBrush(Qt.red)
            painter.drawEllipse(x - radius, y - radius, radius * 2, radius * 2)

            font = painter.font()
            font.setPointSize(10)
            painter.setFont(font)
            painter.setPen(Qt.white)
            painter.drawText(x - 3, y + 3, symbol)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–æ—Ç—ã: {e}")

    def _adapt_coordinates(self, element_data, crop_rect):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –∫ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
        if not crop_rect:
            return element_data.copy()

        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        adapted_data = element_data.copy()

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–µ–∑–∫–∏
        crop_x, crop_y, crop_width, crop_height = crop_rect

        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–¥–∞–Ω—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # –í—ã—á–∏—Ç–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–µ–∑–∫–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if 'x' in adapted_data:
            adapted_data['x'] = adapted_data['x'] - crop_x

        if 'y' in adapted_data:
            adapted_data['y'] = adapted_data['y'] - crop_y

        return adapted_data