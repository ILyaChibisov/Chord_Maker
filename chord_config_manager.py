import pandas as pd
import os
import json
from PyQt5.QtGui import QPixmap, QPainter
from PyQt5.QtCore import Qt


class ChordConfigManager:
    def __init__(self):
        self.excel_path = os.path.join("templates2", "chord_config.xlsx")
        self.template_path = os.path.join("templates2", "template.json")
        self.image_path = os.path.join("templates2", "img.png")
        self.chord_data = {}
        self.ram_data = {}
        self.note_data = []  # –î–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ NOTE
        self.templates = {}

    def load_config_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –∏ JSON"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª
            if os.path.exists(self.excel_path):
                # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏
                df_chords = pd.read_excel(self.excel_path, sheet_name='CHORDS')
                print("=" * 80)
                print("–ö–û–õ–û–ù–ö–ò –í EXCEL CHORDS:", df_chords.columns.tolist())

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
                self.chord_data = df_chords.to_dict('records')
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.chord_data)} –∞–∫–∫–æ—Ä–¥–æ–≤")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ RAM
                df_ram = pd.read_excel(self.excel_path, sheet_name='RAM')
                print("–ö–û–õ–û–ù–ö–ò –í EXCEL RAM:", df_ram.columns.tolist())

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º RAM –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                self.ram_data = df_ram.to_dict('records')
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.ram_data)} RAM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ NOTE
                try:
                    df_note = pd.read_excel(self.excel_path, sheet_name='NOTE')
                    print("–ö–û–õ–û–ù–ö–ò –í EXCEL NOTE:", df_note.columns.tolist())
                    print("–ü–ï–†–í–´–ï 5 –°–¢–†–û–ö NOTE:")
                    print(df_note.head())

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º NOTE –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    self.note_data = df_note.to_dict('records')
                    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.note_data)} NOTE –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
                except Exception as e:
                    print(f"‚ö†Ô∏è –õ–∏—Å—Ç NOTE –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                    self.note_data = []

            else:
                print(f"Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.excel_path}")
                return False

            # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —à–∞–±–ª–æ–Ω—ã
            if os.path.exists(self.template_path):
                with open(self.template_path, 'r', encoding='utf-8') as f:
                    self.templates = json.load(f)
                print("JSON —à–∞–±–ª–æ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

            else:
                print(f"JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.template_path}")
                return False

            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return False

    def get_chord_groups(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∞–∫–∫–æ—Ä–¥–æ–≤"""
        groups = set()
        for chord in self.chord_data:
            chord_name = chord.get('CHORD')
            if chord_name:
                chord_name = str(chord_name)
                base_chord = ''.join([c for c in chord_name if c.isalpha()])
                if base_chord:
                    groups.add(base_chord)
        return sorted(list(groups))

    def get_chords_by_group(self, group):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–æ–≤ –ø–æ –≥—Ä—É–ø–ø–µ"""
        chords = []
        for chord in self.chord_data:
            chord_name = chord.get('CHORD')
            variant = chord.get('VARIANT')

            if chord_name and variant is not None:
                chord_name = str(chord_name)
                base_chord = ''.join([c for c in chord_name if c.isalpha()])
                if base_chord == group:
                    chords.append({
                        'name': f"{chord_name}{variant}",
                        'chord': chord_name,
                        'variant': variant,
                        'data': chord
                    })
        return sorted(chords, key=lambda x: x['name'])

    def get_ram_crop_area(self, ram_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–µ–∑–∫–∏ –∏–∑ RAM –≤ JSON"""
        if not ram_name or self._is_empty_value(ram_name):
            print(f"RAM '{ram_name}' –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        ram_name = str(ram_name).strip()
        print(f"üîç –ü–æ–∏—Å–∫ –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è RAM: '{ram_name}'")

        # –ò—â–µ–º RAM –≤ —Ä–∞–∑–¥–µ–ª–µ crop_rects
        if 'crop_rects' in self.templates and ram_name in self.templates['crop_rects']:
            crop_data = self.templates['crop_rects'][ram_name]
            area = (
                crop_data.get('x', 0),
                crop_data.get('y', 0),
                crop_data.get('width', 100),
                crop_data.get('height', 100)
            )
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ '{ram_name}': {area}")
            return area

        print(f"‚ùå –û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è '{ram_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ JSON")
        return None

    def get_ram_lad_value(self, ram_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è LAD –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ RAM –∏–∑ —Ç–∞–±–ª–∏—Ü—ã RAM"""
        if not ram_name or self._is_empty_value(ram_name):
            return None

        ram_name = str(ram_name).strip()
        print(f"üîç –ü–æ–∏—Å–∫ LAD –¥–ª—è RAM: '{ram_name}'")

        # –ò—â–µ–º RAM –≤ —Ç–∞–±–ª–∏—Ü–µ RAM
        for ram_item in self.ram_data:
            item_ram = ram_item.get('RAM')
            if item_ram and str(item_ram).strip() == ram_name:
                lad_value = ram_item.get('LAD')
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω LAD –¥–ª—è RAM '{ram_name}': '{lad_value}'")
                return lad_value

        print(f"‚ùå RAM '{ram_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ RAM")
        return None

    def get_ram_elements(self, ram_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ RAM –ø–æ –∏–º–µ–Ω–∏"""
        elements = []
        if not ram_name or self._is_empty_value(ram_name):
            return elements

        ram_name = str(ram_name).strip()

        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã RAM –≤ frets
        if ram_name in self.templates.get('frets', {}):
            element_data = self.templates['frets'][ram_name]
            element_data['_key'] = ram_name
            element_data['type'] = 'fret'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø

            elements.append({
                'type': 'fret',
                'data': element_data
            })

        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏ (RAM1, RAM2 –∏ —Ç.–¥.)
        for i in range(1, 5):
            element_key = f"{ram_name}{i}"
            if element_key in self.templates.get('frets', {}):
                element_data = self.templates['frets'][element_key]
                element_data['_key'] = element_key
                element_data['type'] = 'fret'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø

                elements.append({
                    'type': 'fret',
                    'data': element_data
                })

        return elements

    def get_ram_elements_from_lad(self, lad_value):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ RAM –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è LAD"""
        elements = []

        if not lad_value or self._is_empty_value(lad_value):
            return elements

        lad_value = str(lad_value).strip()
        print(f"üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è LAD: '{lad_value}'")

        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∑–∞–ø—è—Ç–æ–π
        lad_keys = [key.strip() for key in lad_value.split(',')]

        for lad_key in lad_keys:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ JSON (–¥–æ–±–∞–≤–ª—è–µ–º LAD)
            json_key = f"{lad_key}LAD"
            if json_key in self.templates.get('frets', {}):
                element_data = self.templates['frets'][json_key]
                element_data['_key'] = json_key
                element_data['type'] = 'fret'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø

                elements.append({
                    'type': 'fret',
                    'data': element_data
                })
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –ª–∞–¥–∞: {json_key}")
            else:
                print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –ª–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON: {json_key}")

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ LAD")
        return elements

    def _is_empty_value(self, value):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        if value is None:
            return True
        if isinstance(value, float) and pd.isna(value):
            return True
        if isinstance(value, str) and value.strip() == '':
            return True
        return False

    def validate_barre_data(self, barre_data):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∞—Ä–µ"""
        if not barre_data:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['x', 'y', 'width', 'height']
        for field in required_fields:
            if field not in barre_data:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field} –≤ –¥–∞–Ω–Ω—ã—Ö –±–∞—Ä–µ")
                return False

        return True

    def get_barre_elements(self, bar_value):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–∞—Ä–µ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ BAR"""
        elements = []

        if self._is_empty_value(bar_value):
            return elements

        bar_str = str(bar_value).strip()
        print(f"üîç –ü–æ–∏—Å–∫ –±–∞—Ä–µ: '{bar_str}'")

        # –ò—â–µ–º –±–∞—Ä–µ –≤ —Ä–∞–∑–¥–µ–ª–µ barres
        if bar_str in self.templates.get('barres', {}):
            barre_data = self.templates['barres'][bar_str]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–∏–ø–∞
            barre_data['_key'] = bar_str
            barre_data['type'] = 'barre'

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—Ä–µ
            if self.validate_barre_data(barre_data):
                elements.append({
                    'type': 'barre',
                    'data': barre_data
                })
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –±–∞—Ä–µ: {bar_str} - {barre_data.get('width', 0)}x{barre_data.get('height', 0)}")
            else:
                print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–∞—Ä–µ: {bar_str}")
        else:
            print(f"‚ùå –ë–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω: {bar_str}")

        return elements

    def get_note_elements_from_column(self, column_value, column_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–æ—Ç –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ —Å –ø–æ–∏—Å–∫–æ–º –≤ —Ç–∞–±–ª–∏—Ü–µ NOTE"""
        elements = []

        if self._is_empty_value(column_value):
            return elements

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
        note_str = self._convert_value_to_string(column_value)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫—É –∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª
        # –ù–∞–ø—Ä–∏–º–µ—Ä: "21.25" –º–æ–∂–µ—Ç –±—ã—Ç—å "21,25" –≤ Excel
        note_list = self._parse_note_values(note_str)

        print(f"üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ '{column_name}': {note_list}")

        for note_key in note_list:
            print(f"  üîé –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è: '{note_key}'")

            # –ò—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ NOTE
            element_found = self._find_element_in_note_table(note_key, column_name)
            if element_found:
                elements.append(element_found)
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è '{note_key}': {element_found['type']}")
            else:
                print(f"  ‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ NOTE –¥–ª—è '{note_key}'")

        print(f"üìù –ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ '{column_name}'")
        return elements

    def _parse_note_values(self, note_str):
        """–ü–∞—Ä—Å–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å —á–∏—Å–ª–∞–º–∏"""
        note_str = str(note_str).strip()

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –∑–∞–ø—è—Ç–æ–π (–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π)
        if ',' in note_str:
            return [item.strip() for item in note_str.split(',') if item.strip()]

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∞ –∏ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä "21.25" –≤–º–µ—Å—Ç–æ "21,25")
        if '.' in note_str:
            parts = note_str.split('.')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
            if len(parts) == 2 and all(part.isdigit() for part in parts):
                # –í–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ "21,25" –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–æ—Å—å –≤ "21.25"
                return [parts[0], parts[1]]
            elif len(parts) > 2 and all(part.isdigit() for part in parts):
                # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É
                return parts

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        return [note_str]

    def _convert_value_to_string(self, value):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π"""
        if value is None:
            return ""

        if isinstance(value, float):
            # –ï—Å–ª–∏ —á–∏—Å–ª–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ —Ü–µ–ª–æ–µ - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
            if value.is_integer():
                return str(int(value))
            else:
                # –î–ª—è –¥—Ä–æ–±–Ω—ã—Ö —á–∏—Å–µ–ª –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                str_value = str(value)
                if '.' in str_value:
                    parts = str_value.split('.')
                    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ 2 —Ü–∏—Ñ—Ä—ã –∏ –æ–±–µ —á–∞—Å—Ç–∏ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    if len(parts) == 2 and len(parts[1]) == 2 and parts[0].isdigit() and parts[1].isdigit():
                        # –í–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ "21,25" -> 21.25
                        return f"{parts[0]}.{parts[1]}"  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                return str(value)
        elif isinstance(value, int):
            return str(value)
        else:
            return str(value)

    def _find_element_in_note_table(self, note_key, column_name):
        """–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ NOTE –ø–æ –∫–ª—é—á—É –∏ –∫–æ–ª–æ–Ω–∫–µ"""
        if not self.note_data:
            print(f"  ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ NOTE –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –ø–æ–∏—Å–∫ –Ω–∞–ø—Ä—è–º—É—é –≤ JSON")
            return self._find_element_in_json(note_key)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        column_mapping = {
            'FNL': ('FNL', 'FNL_ELEM'),
            'FN': ('FN', 'FN_ELEM'),
            'FPOL': ('FPOL', 'FPOL_ELEM'),
            'FPXL': ('FPXL', 'FPXL_ELEM'),
            'FP1': ('FP1', 'FP1_ELEM'),
            'FP2': ('FP2', 'FP2_ELEM'),
            'FP3': ('FP3', 'FP3_ELEM'),
            'FP4': ('FP4', 'FP4_ELEM')
        }

        if column_name not in column_mapping:
            print(f"  ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: {column_name}")
            return None

        source_col, elem_col = column_mapping[column_name]

        # –ò—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ NOTE
        for note_item in self.note_data:
            item_value = note_item.get(source_col)
            if item_value and not self._is_empty_value(item_value):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                item_value_str = self._convert_value_to_string(item_value)

                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                if self._values_match(item_value_str, note_key):
                    elem_value = note_item.get(elem_col)
                    if elem_value and not self._is_empty_value(elem_value):
                        elem_key = self._convert_value_to_string(elem_value)
                        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ NOTE: {note_key} -> {elem_key}")
                        return self._find_element_in_json(elem_key)

        print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ NOTE –¥–ª—è '{note_key}' –≤ –∫–æ–ª–æ–Ω–∫–µ '{source_col}'")
        return None

    def _values_match(self, value1, value2):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        # –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        if str(value1).strip() == str(value2).strip():
            return True

        # –ï—Å–ª–∏ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —Ç–æ—á–∫–æ–π, –∞ –¥—Ä—É–≥–æ–µ —Å –∑–∞–ø—è—Ç–æ–π
        v1_clean = str(value1).replace('.', ',').strip()
        v2_clean = str(value2).replace('.', ',').strip()
        if v1_clean == v2_clean:
            return True

        # –ï—Å–ª–∏ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–æ–µ, –∞ –¥—Ä—É–≥–æ–µ –¥—Ä–æ–±–Ω–æ–µ —Å .0
        try:
            v1_float = float(value1)
            v2_float = float(value2)
            if abs(v1_float - v2_float) < 0.001:  # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å—é
                return True
        except (ValueError, TypeError):
            pass

        return False

    def _find_element_in_json(self, element_key):
        """–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö JSON"""
        element_key = element_key.strip()

        # –ò—â–µ–º –≤ notes
        if element_key in self.templates.get('notes', {}):
            element_data = self.templates['notes'][element_key]
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            element_data['_key'] = element_key
            element_data['type'] = 'note'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø
            print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –Ω–æ—Ç—ã: {element_key} (—Å—Ç–∏–ª—å: {element_data.get('style', 'default')})")
            return {
                'type': 'note',
                'data': element_data
            }

        # –ò—â–µ–º –≤ open_notes
        if element_key in self.templates.get('open_notes', {}):
            element_data = self.templates['open_notes'][element_key]
            element_data['_key'] = element_key
            element_data['type'] = 'note'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø
            print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –Ω–æ—Ç—ã: {element_key} (—Å—Ç–∏–ª—å: {element_data.get('style', 'default')})")
            return {
                'type': 'note',
                'data': element_data
            }

        # –ò—â–µ–º –≤ frets (–ª–∞–¥—ã)
        if element_key in self.templates.get('frets', {}):
            element_data = self.templates['frets'][element_key]
            element_data['_key'] = element_key
            element_data['type'] = 'fret'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø
            print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –ª–∞–¥–∞: {element_key}")
            return {
                'type': 'fret',
                'data': element_data
            }

        print(f"    ‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON: {element_key}")
        return None

    def get_chord_elements(self, chord_config, display_type):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–∫–∫–æ—Ä–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        elements = []

        print(f"üéµ –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞:")
        print(f"   RAM: {chord_config.get('RAM')}")
        print(f"   BAR: {chord_config.get('BAR')}")
        print(f"   FNL: {chord_config.get('FNL')} (—Ç–∏–ø: {type(chord_config.get('FNL'))})")
        print(f"   FN: {chord_config.get('FN')} (—Ç–∏–ø: {type(chord_config.get('FN'))})")
        print(f"   FPOL: {chord_config.get('FPOL')} (—Ç–∏–ø: {type(chord_config.get('FPOL'))})")
        print(f"   FPXL: {chord_config.get('FPXL')} (—Ç–∏–ø: {type(chord_config.get('FPXL'))})")
        print(f"   FP1: {chord_config.get('FP1')} (—Ç–∏–ø: {type(chord_config.get('FP1'))})")
        print(f"   FP2: {chord_config.get('FP2')} (—Ç–∏–ø: {type(chord_config.get('FP2'))})")
        print(f"   FP3: {chord_config.get('FP3')} (—Ç–∏–ø: {type(chord_config.get('FP3'))})")
        print(f"   FP4: {chord_config.get('FP4')} (—Ç–∏–ø: {type(chord_config.get('FP4'))})")

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ LAD –∏–∑ —Ç–∞–±–ª–∏—Ü—ã RAM –Ω–∞ –æ—Å–Ω–æ–≤–µ RAM –∞–∫–∫–æ—Ä–¥–∞
        ram_key = chord_config.get('RAM')
        lad_value = None
        if ram_key:
            lad_value = self.get_ram_lad_value(ram_key)
            print(f"   LAD (–∏–∑ —Ç–∞–±–ª–∏—Ü—ã RAM): {lad_value}")

        # –î–æ–±–∞–≤–ª—è–µ–º RAM —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ RAM (–¥–ª—è –æ–±—Ä–µ–∑–∫–∏)
        if ram_key:
            ram_elements = self.get_ram_elements(ram_key)
            elements.extend(ram_elements)
            print(f"üîß –î–æ–±–∞–≤–ª–µ–Ω–æ {len(ram_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ RAM")

        # –î–æ–±–∞–≤–ª—è–µ–º LAD —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã RAM
        if lad_value:
            lad_elements = self.get_ram_elements_from_lad(lad_value)
            elements.extend(lad_elements)
            print(f"üéØ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(lad_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ LAD")

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–∞—Ä–µ –¢–û–õ–¨–ö–û –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–∞–ª—å—Ü–µ–≤
        if display_type == "fingers":
            bar_elements = self.get_barre_elements(chord_config.get('BAR'))
            elements.extend(bar_elements)
            print(f"üé∏ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(bar_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–∞—Ä–µ")
        else:
            print("üé∏ –ë–∞—Ä–µ –ø—Ä–æ–ø—É—â–µ–Ω (—Ä–µ–∂–∏–º –Ω–æ—Ç)")

        if display_type == "notes":
            # –î–ª—è –Ω–æ—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º FNL –∏ FN
            fnl_elements = self.get_note_elements_from_column(chord_config.get('FNL'), 'FNL')
            fn_elements = self.get_note_elements_from_column(chord_config.get('FN'), 'FN')

            elements.extend(fnl_elements)
            elements.extend(fn_elements)
            print(f"üéµ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(fnl_elements) + len(fn_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–æ—Ç")

        else:  # fingers
            # –î–ª—è –ø–∞–ª—å—Ü–µ–≤: –∏—Å–ø–æ–ª—å–∑—É–µ–º FPOL, FPXL, FP1, FP2, FP3, FP4
            fpol_elements = self.get_note_elements_from_column(chord_config.get('FPOL'), 'FPOL')
            fpxl_elements = self.get_note_elements_from_column(chord_config.get('FPXL'), 'FPXL')
            fp1_elements = self.get_note_elements_from_column(chord_config.get('FP1'), 'FP1')
            fp2_elements = self.get_note_elements_from_column(chord_config.get('FP2'), 'FP2')
            fp3_elements = self.get_note_elements_from_column(chord_config.get('FP3'), 'FP3')
            fp4_elements = self.get_note_elements_from_column(chord_config.get('FP4'), 'FP4')

            elements.extend(fpol_elements)
            elements.extend(fpxl_elements)
            elements.extend(fp1_elements)
            elements.extend(fp2_elements)
            elements.extend(fp3_elements)
            elements.extend(fp4_elements)
            print(
                f"üëÜ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(fpol_elements) + len(fpxl_elements) + len(fp1_elements) + len(fp2_elements) + len(fp3_elements) + len(fp4_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∞–ª—å—Ü–µ–≤")

        print(f"üìä –ò–¢–û–ì–û —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏: {len(elements)}")

        return elements

    def draw_elements_on_image(self, pixmap, elements, crop_rect=None):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ë–ï–ó –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        if pixmap.isNull():
            return pixmap

        result_pixmap = QPixmap(pixmap)
        painter = QPainter(result_pixmap)

        try:
            for element in elements:
                if element['type'] == 'fret':
                    self.draw_fret(painter, element['data'], crop_rect)
                elif element['type'] == 'note':
                    self.draw_note(painter, element['data'], crop_rect)
                elif element['type'] == 'barre':
                    self.draw_barre(painter, element['data'], crop_rect)

        finally:
            painter.end()

        return result_pixmap

    def draw_elements_on_canvas(self, painter, elements, crop_rect):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –≥–æ—Ç–æ–≤–æ–º QPainter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"""
        try:
            for element in elements:
                if element['type'] == 'fret':
                    self.draw_fret_on_canvas(painter, element['data'], crop_rect)
                elif element['type'] == 'note':
                    self.draw_note_on_canvas(painter, element['data'], crop_rect)
                elif element['type'] == 'barre':
                    self.draw_barre_on_canvas(painter, element['data'], crop_rect)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ canvas: {e}")
            import traceback
            traceback.print_exc()

    def draw_fret(self, painter, fret_data, crop_rect=None):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∞–¥–∞ —Å —É—á–µ—Ç–æ–º –æ–±—Ä–µ–∑–∫–∏"""
        try:
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            adapted_data = self._adapt_coordinates_simple(fret_data, crop_rect)
            symbol = adapted_data.get('symbol', '?')
            print(f"üé® –†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∞–¥–∞: {symbol} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ({adapted_data.get('x', 0)}, {adapted_data.get('y', 0)})")

            from drawing_elements import DrawingElements
            DrawingElements.draw_fret(painter, adapted_data)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ª–∞–¥–∞: {e}")

    def draw_fret_on_canvas(self, painter, fret_data, crop_rect):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∞–¥–∞ –Ω–∞ canvas —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"""
        try:
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ canvas
            adapted_data = self._adapt_coordinates_for_canvas(fret_data, crop_rect)
            symbol = adapted_data.get('symbol', '?')
            print(
                f"üé® –†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∞–¥–∞ –Ω–∞ canvas: {symbol} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ({adapted_data.get('x', 0)}, {adapted_data.get('y', 0)})")

            from drawing_elements import DrawingElements
            DrawingElements.draw_fret(painter, adapted_data)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ª–∞–¥–∞ –Ω–∞ canvas: {e}")

    def draw_note(self, painter, note_data, crop_rect=None):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–æ—Ç—ã —Å —É—á–µ—Ç–æ–º –æ–±—Ä–µ–∑–∫–∏"""
        try:
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            adapted_data = self._adapt_coordinates_simple(note_data, crop_rect)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            display_text = adapted_data.get('display_text', 'finger')
            if display_text == 'note_name':
                symbol = adapted_data.get('note_name', '')
            elif display_text == 'symbol':
                symbol = adapted_data.get('symbol', '')
            else:  # finger
                symbol = adapted_data.get('finger', '1')

            print(f"üéµ –†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–æ—Ç—ã: {symbol} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ({adapted_data.get('x', 0)}, {adapted_data.get('y', 0)}) "
                  f"—Å—Ç–∏–ª—å: {adapted_data.get('style', 'default')}")

            from drawing_elements import DrawingElements
            DrawingElements.draw_note(painter, adapted_data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–æ—Ç—ã: {e}")

    def draw_note_on_canvas(self, painter, note_data, crop_rect):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–æ—Ç—ã –Ω–∞ canvas —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"""
        try:
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ canvas
            adapted_data = self._adapt_coordinates_for_canvas(note_data, crop_rect)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            display_text = adapted_data.get('display_text', 'finger')
            if display_text == 'note_name':
                symbol = adapted_data.get('note_name', '')
            elif display_text == 'symbol':
                symbol = adapted_data.get('symbol', '')
            else:  # finger
                symbol = adapted_data.get('finger', '1')

            print(
                f"üéµ –†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–æ—Ç—ã –Ω–∞ canvas: {symbol} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ({adapted_data.get('x', 0)}, {adapted_data.get('y', 0)}) "
                f"—Å—Ç–∏–ª—å: {adapted_data.get('style', 'default')}")

            from drawing_elements import DrawingElements
            DrawingElements.draw_note(painter, adapted_data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –Ω–æ—Ç—ã –Ω–∞ canvas: {e}")

    def draw_barre(self, painter, barre_data, crop_rect=None):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –±–∞—Ä–µ —Å —É—á–µ—Ç–æ–º –æ–±—Ä–µ–∑–∫–∏ - –ü–†–û–°–¢–û–ô –°–î–í–ò–ì –ö–û–û–†–î–ò–ù–ê–¢"""
        try:
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            adapted_data = self._adapt_coordinates_simple(barre_data, crop_rect)

            print(f"üé∏ –†–∏—Å–æ–≤–∞–Ω–∏–µ –±–∞—Ä–µ: –ø–æ–∑–∏—Ü–∏—è ({adapted_data.get('x', 0)}, {adapted_data.get('y', 0)}) "
                  f"—Ä–∞–∑–º–µ—Ä {adapted_data.get('width', 0)}x{adapted_data.get('height', 0)} "
                  f"—Å—Ç–∏–ª—å {adapted_data.get('style', 'default')}")

            from drawing_elements import DrawingElements
            DrawingElements.draw_barre(painter, adapted_data)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –±–∞—Ä–µ: {e}")
            import traceback
            traceback.print_exc()

    def draw_barre_on_canvas(self, painter, barre_data, crop_rect):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ –±–∞—Ä–µ –Ω–∞ canvas —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"""
        try:
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ canvas
            adapted_data = self._adapt_coordinates_for_canvas(barre_data, crop_rect)

            print(f"üé∏ –†–∏—Å–æ–≤–∞–Ω–∏–µ –±–∞—Ä–µ –Ω–∞ canvas: –ø–æ–∑–∏—Ü–∏—è ({adapted_data.get('x', 0)}, {adapted_data.get('y', 0)}) "
                  f"—Ä–∞–∑–º–µ—Ä {adapted_data.get('width', 0)}x{adapted_data.get('height', 0)} "
                  f"—Ä–∞–¥–∏—É—Å {adapted_data.get('radius', 0)}")

            from drawing_elements import DrawingElements
            DrawingElements.draw_barre(painter, adapted_data)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –±–∞—Ä–µ –Ω–∞ canvas: {e}")
            import traceback
            traceback.print_exc()

    def _adapt_coordinates_simple(self, element_data, crop_rect):
        """–ü—Ä–æ—Å—Ç–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç - —Ç–æ–ª—å–∫–æ —Å–¥–≤–∏–≥ –±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not crop_rect:
            return element_data.copy()

        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        adapted_data = element_data.copy()

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–µ–∑–∫–∏
        crop_x, crop_y, crop_width, crop_height = crop_rect

        # –ü—Ä–æ—Å—Ç–æ –≤—ã—á–∏—Ç–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–µ–∑–∫–∏
        if 'x' in adapted_data:
            adapted_data['x'] = adapted_data['x'] - crop_x

        if 'y' in adapted_data:
            adapted_data['y'] = adapted_data['y'] - crop_y

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –¥–ª—è Qt
        adapted_data['x'] = int(round(adapted_data.get('x', 0)))
        adapted_data['y'] = int(round(adapted_data.get('y', 0)))

        if 'width' in adapted_data:
            adapted_data['width'] = int(round(adapted_data.get('width', 100)))
        if 'height' in adapted_data:
            adapted_data['height'] = int(round(adapted_data.get('height', 20)))
        if 'radius' in adapted_data:
            adapted_data['radius'] = int(round(adapted_data.get('radius', 10)))

        return adapted_data

    def _adapt_coordinates_for_canvas(self, element_data, crop_rect):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è canvas - –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ"""
        if not crop_rect:
            return element_data.copy()

        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        adapted_data = element_data.copy()

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–µ–∑–∫–∏
        crop_x, crop_y, crop_width, crop_height = crop_rect

        original_x = element_data.get('x', 0)
        original_y = element_data.get('y', 0)

        print(f"üéØ –ê–¥–∞–ø—Ç–∞—Ü–∏—è {element_data.get('type', 'unknown')}:")
        print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({original_x}, {original_y})")
        print(f"   –û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏: ({crop_x}, {crop_y}, {crop_width}, {crop_height})")

        # –î–ª—è –í–°–ï–• —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ –≤—ã—á–∏—Ç–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–µ–∑–∫–∏
        if 'x' in adapted_data:
            adapted_data['x'] = original_x - crop_x

        if 'y' in adapted_data:
            adapted_data['y'] = original_y - crop_y

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –¥–ª—è Qt
        adapted_data['x'] = int(round(adapted_data.get('x', 0)))
        adapted_data['y'] = int(round(adapted_data.get('y', 0)))

        # –î–ª—è –±–∞—Ä–µ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (—Ü–µ–Ω—Ç—Ä -> –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
        if adapted_data.get('type') == 'barre':
            barre_width = adapted_data.get('width', 100)
            barre_height = adapted_data.get('height', 20)

            if 'x' in adapted_data:
                adapted_data['x'] = adapted_data['x'] - (barre_width // 2)
            if 'y' in adapted_data:
                adapted_data['y'] = adapted_data['y'] - (barre_height // 2)

        print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({adapted_data.get('x', 0)}, {adapted_data.get('y', 0)})")

        return adapted_data